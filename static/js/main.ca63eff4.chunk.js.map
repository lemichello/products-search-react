{"version":3,"sources":["components/FilterableProductTable/components/SearchBar/index.jsx","components/FilterableProductTable/components/ProductTable/components/ProductCategoryRow/index.jsx","components/FilterableProductTable/components/ProductTable/components/ProductRow/index.jsx","components/FilterableProductTable/components/ProductTable/index.jsx","config.js","components/FilterableProductTable/index.jsx","components/index.js","serviceWorker.js","index.js"],"names":["SearchBar","filter","useState","searchValue","setSearchValue","showInStock","setShowInStock","useEffect","name","stocked","className","type","leftIcon","placeholder","value","onChange","e","target","checked","ProductCategoryRow","props","colSpan","ProductRow","product","price","ProductTable","products","groupBy","x","category","Object","keys","map","key","_id","FilterableProductTable","filteredProducts","setFilteredProducts","setProducts","a","async","axios","get","config","resp","data","filterProducts","useCallback","toLowerCase","includes","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0YAIaA,EAAY,YAAsB,IAAXC,EAAU,EAAVA,OAAU,EACNC,mBAAS,IADH,mBACrCC,EADqC,KACxBC,EADwB,OAENF,oBAAS,GAFH,mBAErCG,EAFqC,KAExBC,EAFwB,KAQ5C,OAJAC,qBAAU,WACRN,EAAO,CAAEO,KAAML,EAAaM,QAASJ,MACpC,CAACA,EAAaF,EAAaF,IAG5B,yBAAKS,UAAW,cACd,kBAAC,IAAD,CACEC,KAAM,SACND,UAAW,eACXE,SAAU,cACVC,YAAa,YACbC,MAAOX,EACPY,SAAU,SAAAC,GAAC,OAAIZ,EAAeY,EAAEC,OAAOH,UAEzC,kBAAC,IAAD,CACEI,QAASb,EACTU,SAAU,kBAAMT,GAAgBD,KAFlC,iC,iBCnBOc,G,cAAqB,SAASC,GACzC,OACE,4BACE,wBAAIV,UAAW,WAAYW,QAAS,QACjCD,EAAMZ,SCJFc,G,OAAa,SAASF,GAAQ,IAAD,EACPA,EAAMG,QAA/Bf,EADgC,EAChCA,KAAMgB,EAD0B,EAC1BA,MAAOf,EADmB,EACnBA,QAErB,OACE,4BACE,wBAAIC,UAAWD,EAAU,GAAK,aAAcD,GAC5C,4BAAKgB,MCHEC,EAAe,YAAwB,IAAbC,EAAY,EAAZA,SAGrC,OAFAA,EAAWC,IAAQD,GAAU,SAAAE,GAAC,OAAIA,EAAEC,YAGlC,+BACE,+BACE,4BACE,wBAAInB,UAAW,oBAAf,QACA,wBAAIA,UAAW,oBAAf,WAGHoB,OAAOC,KAAKL,GAAUM,KAAI,SAAAH,GAAQ,OACjC,2BAAOI,IAAKJ,GACV,kBAAC,EAAD,CAAoBrB,KAAMqB,EAAUI,IAAKJ,IACxCH,EAASG,GAAUG,KAAI,SAAAT,GAAO,OAC7B,kBAAC,EAAD,CAAYA,QAASA,EAASU,IAAKV,EAAQW,eCrBvC,EACN,gD,iBCKGC,EAAyB,WAAY,IAAD,EACDjC,mBAAS,IADR,mBAC1CkC,EAD0C,KACxBC,EADwB,OAEjBnC,mBAAS,IAFQ,mBAE1CwB,EAF0C,KAEhCY,EAFgC,KAI/C/B,qBAAU,YACR,WAAC,QAAAgC,EAAAC,OAAA,kEAAAD,EAAA,MACkBE,IAAMC,IAAN,UAAaC,EAAb,cADlB,OACKC,EADL,OAGCN,EAAYM,EAAKC,MACjBR,EAAoBO,EAAKC,MAJ1B,qCAAD,KAMC,IAEH,IAAIC,EAAiBC,uBACnB,SAAA/B,GACEqB,EACEX,EAASzB,QACP,SAAA2B,GAAC,OACCA,EAAEpB,KAAKwC,cAAcC,SAASjC,EAAER,KAAKwC,kBACpChC,EAAEP,SAAUmB,EAAEnB,eAIvB,CAACiB,IAGH,OACE,6BACE,kBAAC,EAAD,CAAWzB,OAAQ6C,IACnB,kBAAC,EAAD,CAAcpB,SAAUU,MCvBfc,MARf,WACE,OACE,yBAAKxC,UAAW,OACd,kBAAC,EAAD,QCKcyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ca63eff4.chunk.js","sourcesContent":["import './style.css';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Checkbox, InputGroup } from '@blueprintjs/core';\r\n\r\nexport const SearchBar = function({ filter }) {\r\n  const [searchValue, setSearchValue] = useState('');\r\n  const [showInStock, setShowInStock] = useState(false);\r\n\r\n  useEffect(() => {\r\n    filter({ name: searchValue, stocked: showInStock });\r\n  }, [showInStock, searchValue, filter]);\r\n\r\n  return (\r\n    <div className={'search-bar'}>\r\n      <InputGroup\r\n        type={'search'}\r\n        className={'search-input'}\r\n        leftIcon={'search-text'}\r\n        placeholder={'Search...'}\r\n        value={searchValue}\r\n        onChange={e => setSearchValue(e.target.value)}\r\n      />\r\n      <Checkbox\r\n        checked={showInStock}\r\n        onChange={() => setShowInStock(!showInStock)}\r\n      >\r\n        Only show products in stock\r\n      </Checkbox>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './style.css';\r\n\r\nexport const ProductCategoryRow = function(props) {\r\n  return (\r\n    <tr>\r\n      <th className={'category'} colSpan={'100%'}>\r\n        {props.name}\r\n      </th>\r\n    </tr>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './style.css';\r\n\r\nexport const ProductRow = function(props) {\r\n  const { name, price, stocked } = props.product;\r\n\r\n  return (\r\n    <tr>\r\n      <td className={stocked ? '' : 'red-color'}>{name}</td>\r\n      <td>{price}</td>\r\n    </tr>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport groupBy from 'lodash/groupBy';\r\nimport './style.css';\r\nimport { ProductCategoryRow } from './components/ProductCategoryRow';\r\nimport { ProductRow } from './components/ProductRow';\r\n\r\nexport const ProductTable = function({ products }) {\r\n  products = groupBy(products, x => x.category);\r\n\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th className={'text-align-start'}>Name</th>\r\n          <th className={'text-align-start'}>Price</th>\r\n        </tr>\r\n      </thead>\r\n      {Object.keys(products).map(category => (\r\n        <tbody key={category}>\r\n          <ProductCategoryRow name={category} key={category} />\r\n          {products[category].map(product => (\r\n            <ProductRow product={product} key={product._id} />\r\n          ))}\r\n        </tbody>\r\n      ))}\r\n    </table>\r\n  );\r\n};\r\n","export default  {\r\n  apiUrl: 'https://products-search-api.herokuapp.com/api'\r\n};\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { SearchBar } from './components/SearchBar';\r\nimport { ProductTable } from './components/ProductTable';\r\nimport config from '../../config';\r\nimport axios from 'axios';\r\n\r\nexport const FilterableProductTable = function() {\r\n  let [filteredProducts, setFilteredProducts] = useState([]);\r\n  let [products, setProducts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    (async function fetchData() {\r\n      let resp = await axios.get(`${config.apiUrl}/product`);\r\n\r\n      setProducts(resp.data);\r\n      setFilteredProducts(resp.data);\r\n    })();\r\n  }, []);\r\n\r\n  let filterProducts = useCallback(\r\n    e => {\r\n      setFilteredProducts(\r\n        products.filter(\r\n          x =>\r\n            x.name.toLowerCase().includes(e.name.toLowerCase()) &&\r\n            (e.stocked ? x.stocked : true)\r\n        )\r\n      );\r\n    },\r\n    [products]\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <SearchBar filter={filterProducts} />\r\n      <ProductTable products={filteredProducts} />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './style.css';\r\nimport { FilterableProductTable } from './FilterableProductTable';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className={'app'}>\r\n      <FilterableProductTable />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}