{"version":3,"sources":["components/FilterableProductTable/components/SearchBar/index.jsx","components/FilterableProductTable/components/ProductTable/components/ProductCategoryRow/index.jsx","components/FilterableProductTable/components/ProductTable/components/ProductRow/index.jsx","components/FilterableProductTable/components/ProductTable/components/NewProductDialog/index.jsx","components/FilterableProductTable/components/ProductTable/index.jsx","components/FilterableProductTable/utils/toaster.js","config.js","components/FilterableProductTable/index.jsx","components/index.js","serviceWorker.js","index.js"],"names":["SearchBar","filter","useState","searchValue","setSearchValue","showInStock","setShowInStock","useEffect","name","stocked","className","type","leftIcon","placeholder","value","onChange","e","target","checked","ProductCategoryRow","props","colSpan","ProductRow","product","price","NewProductDialog","isOpen","hideDialog","confirmDialog","setName","category","setCategory","setPrice","setStocked","onClose","icon","title","canOutsideClickClose","Classes","DIALOG_BODY","label","labelInfo","labelFor","min","onValueChange","_","large","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","onClick","intent","disabled","ProductTable","products","addProduct","setIsOpen","groupBy","x","closeDialog","useCallback","Object","keys","map","key","_id","text","DefaultToaster","Toaster","create","position","Position","TOP","apiUrl","FilterableProductTable","filteredProducts","setFilteredProducts","setProducts","a","async","axios","get","config","resp","data","filterProducts","toLowerCase","includes","post","concat","show","message","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.52279336.chunk.js","sourcesContent":["import './style.css';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Checkbox, InputGroup } from '@blueprintjs/core';\r\n\r\nexport const SearchBar = function({ filter }) {\r\n  const [searchValue, setSearchValue] = useState('');\r\n  const [showInStock, setShowInStock] = useState(false);\r\n\r\n  useEffect(() => {\r\n    filter({ name: searchValue, stocked: showInStock });\r\n  }, [showInStock, searchValue, filter]);\r\n\r\n  return (\r\n    <div className={'search-bar'}>\r\n      <InputGroup\r\n        type={'search'}\r\n        className={'search-input'}\r\n        leftIcon={'search'}\r\n        placeholder={'Search...'}\r\n        value={searchValue}\r\n        onChange={e => setSearchValue(e.target.value)}\r\n      />\r\n      <Checkbox\r\n        checked={showInStock}\r\n        onChange={() => setShowInStock(!showInStock)}\r\n      >\r\n        Only show products in stock\r\n      </Checkbox>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './style.css';\r\n\r\nexport const ProductCategoryRow = function(props) {\r\n  return (\r\n    <tr>\r\n      <th className={'category'} colSpan={'100%'}>\r\n        {props.name}\r\n      </th>\r\n    </tr>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './style.css';\r\n\r\nexport const ProductRow = function(props) {\r\n  const { name, price, stocked } = props.product;\r\n\r\n  return (\r\n    <tr>\r\n      <td className={stocked ? '' : 'red-color'}>{name}</td>\r\n      <td>{price}</td>\r\n    </tr>\r\n  );\r\n};\r\n","import './style.css';\r\nimport React, { useState } from 'react';\r\nimport {\r\n  Dialog,\r\n  InputGroup,\r\n  Classes,\r\n  FormGroup,\r\n  NumericInput,\r\n  Switch,\r\n  Button\r\n} from '@blueprintjs/core';\r\n\r\nexport const NewProductDialog = function({\r\n  isOpen,\r\n  hideDialog,\r\n  confirmDialog\r\n}) {\r\n  const [name, setName] = useState('');\r\n  const [category, setCategory] = useState('');\r\n  const [price, setPrice] = useState('1');\r\n  const [stocked, setStocked] = useState(true);\r\n\r\n  const onClose = () => {\r\n    setName('');\r\n    setCategory('');\r\n    setPrice('1');\r\n    setStocked(true);\r\n    hideDialog();\r\n  };\r\n\r\n  const addProduct = () => {\r\n    confirmDialog({\r\n      name,\r\n      category,\r\n      price: '$' + price,\r\n      stocked\r\n    });\r\n    onClose();\r\n  };\r\n\r\n  const validateProduct = () => {\r\n    return !(name && category && price);\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      icon={'plus'}\r\n      title={'New Product'}\r\n      canOutsideClickClose={false}\r\n      isOpen={isOpen}\r\n      onClose={onClose}\r\n    >\r\n      <div className={Classes.DIALOG_BODY}>\r\n        <FormGroup\r\n          label={'Description'}\r\n          labelInfo={'(required)'}\r\n          labelFor={'text-input'}\r\n        >\r\n          <InputGroup\r\n            className={'mb-10 w-220'}\r\n            placeholder={'Name'}\r\n            value={name}\r\n            onChange={e => setName(e.target.value)}\r\n          />\r\n          <InputGroup\r\n            className={'mb-10 w-220'}\r\n            placeholder={'Category'}\r\n            value={category}\r\n            onChange={e => setCategory(e.target.value)}\r\n          />\r\n        </FormGroup>\r\n        <FormGroup\r\n          label={'Price'}\r\n          labelInfo={'(required)'}\r\n          labelFor={'numeric-input'}\r\n        >\r\n          <NumericInput\r\n            min={1}\r\n            leftIcon={'dollar'}\r\n            value={price}\r\n            onValueChange={(_, value) => setPrice(value)}\r\n          />\r\n        </FormGroup>\r\n        <Switch\r\n          className={'w-220'}\r\n          large={true}\r\n          checked={stocked}\r\n          label={'In stock'}\r\n          onChange={e => setStocked(e.target.checked)}\r\n        />\r\n      </div>\r\n      <div className={Classes.DIALOG_FOOTER}>\r\n        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n          <Button onClick={onClose}>Close</Button>\r\n          <Button\r\n            intent={'success'}\r\n            onClick={addProduct}\r\n            disabled={validateProduct()}\r\n          >\r\n            Confirm\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </Dialog>\r\n  );\r\n};\r\n","import React, { useState, useCallback } from 'react';\r\nimport groupBy from 'lodash/groupBy';\r\nimport './style.css';\r\nimport { ProductCategoryRow } from './components/ProductCategoryRow';\r\nimport { ProductRow } from './components/ProductRow';\r\nimport { Button } from '@blueprintjs/core';\r\nimport { NewProductDialog } from './components/NewProductDialog';\r\n\r\nexport const ProductTable = function({ products, addProduct }) {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  products = groupBy(products, x => x.category);\r\n\r\n  const openDialog = () => {\r\n    setIsOpen(true);\r\n  };\r\n\r\n  let closeDialog = useCallback(() => {\r\n    setIsOpen(false);\r\n  }, []);\r\n\r\n  let confirmDialog = useCallback(\r\n    e => {\r\n      addProduct(e);\r\n    },\r\n    [addProduct]\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th className={'text-align-start'}>Name</th>\r\n            <th className={'text-align-start'}>Price</th>\r\n          </tr>\r\n        </thead>\r\n        {Object.keys(products).map(category => (\r\n          <tbody key={category}>\r\n            <ProductCategoryRow name={category} key={category} />\r\n            {products[category].map(product => (\r\n              <ProductRow product={product} key={product._id} />\r\n            ))}\r\n          </tbody>\r\n        ))}\r\n      </table>\r\n      <Button\r\n        className={'mt-8'}\r\n        icon={'add'}\r\n        text={'New'}\r\n        intent=\"primary\"\r\n        onClick={openDialog}\r\n      />\r\n      <NewProductDialog\r\n        isOpen={isOpen}\r\n        hideDialog={closeDialog}\r\n        confirmDialog={confirmDialog}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { Toaster, Position } from '@blueprintjs/core';\r\n\r\nexport const DefaultToaster = Toaster.create({\r\n  position: Position.TOP\r\n});\r\n","export default {\r\n  apiUrl:\r\n    process.env.NODE_ENV === 'development'\r\n      ? 'http://localhost:3000/api'\r\n      : 'https://products-search-api.herokuapp.com/api'\r\n};\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { SearchBar } from './components/SearchBar';\r\nimport { ProductTable } from './components/ProductTable';\r\nimport { DefaultToaster } from './utils/toaster';\r\nimport config from '../../config';\r\nimport axios from 'axios';\r\n\r\nexport const FilterableProductTable = function() {\r\n  let [filteredProducts, setFilteredProducts] = useState([]);\r\n  let [products, setProducts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    (async function fetchData() {\r\n      let resp = await axios.get(`${config.apiUrl}/product`);\r\n\r\n      setProducts(resp.data);\r\n      setFilteredProducts(resp.data);\r\n    })();\r\n  }, []);\r\n\r\n  let filterProducts = useCallback(\r\n    e => {\r\n      setFilteredProducts(\r\n        products.filter(\r\n          x =>\r\n            x.name.toLowerCase().includes(e.name.toLowerCase()) &&\r\n            (e.stocked ? x.stocked : true)\r\n        )\r\n      );\r\n    },\r\n    [products]\r\n  );\r\n\r\n  let addProduct = useCallback(\r\n    product => {\r\n      (async function() {\r\n        let resp = await axios.post(`${config.apiUrl}/product`, product);\r\n\r\n        setProducts(products.concat([resp.data]));\r\n        DefaultToaster.show({\r\n          message: `Successfully added ${product.name}`,\r\n          intent: 'success',\r\n          icon: 'saved'\r\n        });\r\n      })();\r\n    },\r\n    [products]\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <SearchBar filter={filterProducts} />\r\n      <ProductTable products={filteredProducts} addProduct={addProduct} />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './style.css';\r\nimport { FilterableProductTable } from './FilterableProductTable';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className={'app'}>\r\n      <FilterableProductTable />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}